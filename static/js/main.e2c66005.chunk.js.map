{"version":3,"sources":["country/country.component.jsx","countryList/country-list.component.jsx","search/search.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Country","props","countries","months","className","class","src","value","retkey","key","toLowerCase","getCountyCode","country","date","ar","split","formatData","lastReported","confirmed","deaths","recovered","CountryList","map","Search","placeholder","handleChange","type","onChange","App","e","setState","searchText","target","state","fetch","then","resp","json","data","returnData","newObj","this","getMaxCount","push","length","filterList","filter","c","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iTAGaA,G,YAAU,SAACC,GAEpB,IAAIC,EAAW,CACX,GAAM,UACN,GAAM,uBACN,GAAM,cACN,GAAM,sBACN,GAAM,WACN,GAAM,UACN,GAAM,UACN,GAAM,SACN,GAAM,aACN,GAAM,YACN,GAAM,iBACN,GAAM,UACN,GAAM,YACN,GAAM,QACN,GAAM,mBACN,GAAM,aACN,GAAM,yBACN,GAAM,WACN,GAAM,aACN,GAAM,UACN,GAAM,eACN,GAAM,WACN,GAAM,UACN,GAAM,UACN,GAAM,QACN,GAAM,sBACN,GAAM,UACN,GAAM,SACN,GAAM,UACN,GAAM,wBACN,GAAM,SACN,GAAM,UACN,GAAM,SACN,GAAM,gBACN,GAAM,WACN,GAAM,UACN,GAAM,SACN,GAAM,SACN,GAAM,0BACN,GAAM,WACN,GAAM,2BACN,GAAM,wBACN,GAAM,cACN,GAAM,iCACN,GAAM,eACN,GAAM,QACN,GAAM,WACN,GAAM,QACN,GAAM,WACN,GAAM,aACN,GAAM,OACN,GAAM,aACN,GAAM,aACN,GAAM,mBACN,GAAM,SACN,GAAM,UACN,GAAM,UACN,GAAM,WACN,GAAM,UACN,GAAM,WACN,GAAM,qBACN,GAAM,UACN,GAAM,UACN,GAAM,UACN,GAAM,QACN,GAAM,iBACN,GAAM,UACN,GAAM,QACN,GAAM,WACN,GAAM,UACN,GAAM,OACN,GAAM,mBACN,GAAM,aACN,GAAM,gBACN,GAAM,SACN,GAAM,QACN,GAAM,iBACN,SAAU,UACV,SAAU,mBACV,SAAU,WACV,SAAU,QACV,GAAM,UACN,GAAM,UACN,GAAM,gBACN,GAAM,WACN,GAAM,QACN,GAAM,YACN,GAAM,YACN,GAAM,SACN,GAAM,SACN,GAAM,aACN,GAAM,oBACN,GAAM,SACN,GAAM,gBACN,GAAM,YACN,GAAM,OACN,GAAM,gBACN,GAAM,SACN,GAAM,YACN,GAAM,oCACN,GAAM,WACN,GAAM,UACN,GAAM,QACN,GAAM,UACN,GAAM,YACN,GAAM,UACN,GAAM,SACN,GAAM,cACN,GAAM,QACN,GAAM,iCACN,GAAM,OACN,GAAM,OACN,GAAM,UACN,GAAM,QACN,GAAM,SACN,GAAM,UACN,GAAM,SACN,GAAM,QACN,GAAM,QACN,GAAM,aACN,GAAM,WACN,GAAM,WACN,GAAM,UACN,GAAM,wBACN,GAAM,cACN,GAAM,cACN,GAAM,SACN,GAAM,iBACN,GAAM,aACN,GAAM,OACN,GAAM,UACN,GAAM,cACN,GAAM,gBACN,GAAM,YACN,GAAM,UACN,GAAM,UACN,GAAM,YACN,GAAM,aACN,GAAM,SACN,GAAM,QACN,GAAM,UACN,GAAM,SACN,GAAM,UACN,GAAM,aACN,GAAM,eACN,GAAM,aACN,GAAM,mBACN,GAAM,kBACN,GAAM,OACN,GAAM,UACN,GAAM,WACN,GAAM,QACN,GAAM,2BACN,GAAM,aACN,GAAM,aACN,GAAM,aACN,GAAM,QACN,GAAM,YACN,GAAM,WACN,GAAM,SACN,GAAM,SACN,GAAM,WACN,GAAM,aACN,GAAM,UACN,GAAM,gBACN,GAAM,QACN,GAAM,iBACN,GAAM,UACN,GAAM,YACN,GAAM,cACN,GAAM,SACN,GAAM,QACN,GAAM,QACN,GAAM,OACN,GAAM,cACN,GAAM,OACN,GAAM,SACN,GAAM,OACN,GAAM,mBACN,GAAM,mBACN,GAAM,cACN,GAAM,WACN,GAAM,SACN,GAAM,4BACN,GAAM,mBACN,GAAM,cACN,GAAM,YACN,GAAM,WACN,GAAM,QACN,GAAM,WACN,GAAM,QACN,GAAM,aACN,GAAM,UACN,GAAM,SACN,GAAM,SACN,GAAM,SACN,GAAM,eACN,GAAM,kBACN,GAAM,aACN,GAAM,QACN,GAAM,SACN,GAAM,YACN,GAAM,+CACN,GAAM,WACN,GAAM,yBACN,GAAM,WACN,GAAM,eACN,GAAM,aACN,GAAM,UACN,GAAM,UACN,GAAM,WACN,GAAM,cACN,GAAM,iCACN,GAAM,cACN,GAAM,eACN,GAAM,QACN,GAAM,uBACN,GAAM,2BACN,GAAM,OACN,GAAM,sCACN,GAAM,OACN,GAAM,WACN,GAAM,aACN,GAAM,UACN,GAAM,cACN,GAAM,eACN,GAAM,UACN,GAAM,QACN,GAAM,SACN,GAAM,sBACN,GAAM,SACN,GAA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","file":"static/js/main.e2c66005.chunk.js","sourcesContent":["import React from 'react';\r\nimport './country.css';\r\n\r\nexport const Country = (props)=>{\r\n\r\n    let countries ={\r\n        \"AD\": \"Andorra\",\r\n        \"AE\": \"United Arab Emirates\",\r\n        \"AF\": \"Afghanistan\",\r\n        \"AG\": \"Antigua and Barbuda\",\r\n        \"AI\": \"Anguilla\",\r\n        \"AL\": \"Albania\",\r\n        \"AM\": \"Armenia\",\r\n        \"AO\": \"Angola\",\r\n        \"AQ\": \"Antarctica\",\r\n        \"AR\": \"Argentina\",\r\n        \"AS\": \"American Samoa\",\r\n        \"AT\": \"Austria\",\r\n        \"AU\": \"Australia\",\r\n        \"AW\": \"Aruba\",\r\n        \"AX\": \"Åland Islands\",\r\n        \"AZ\": \"Azerbaijan\",\r\n        \"BA\": \"Bosnia and Herzegovina\",\r\n        \"BB\": \"Barbados\",\r\n        \"BD\": \"Bangladesh\",\r\n        \"BE\": \"Belgium\",\r\n        \"BF\": \"Burkina Faso\",\r\n        \"BG\": \"Bulgaria\",\r\n        \"BH\": \"Bahrain\",\r\n        \"BI\": \"Burundi\",\r\n        \"BJ\": \"Benin\",\r\n        \"BL\": \"Saint Barthélemy\",\r\n        \"BM\": \"Bermuda\",\r\n        \"BN\": \"Brunei\",\r\n        \"BO\": \"Bolivia\",\r\n        \"BQ\": \"Caribbean Netherlands\",\r\n        \"BR\": \"Brazil\",\r\n        \"BS\": \"Bahamas\",\r\n        \"BT\": \"Bhutan\",\r\n        \"BV\": \"Bouvet Island\",\r\n        \"BW\": \"Botswana\",\r\n        \"BY\": \"Belarus\",\r\n        \"BZ\": \"Belize\",\r\n        \"CA\": \"Canada\",\r\n        \"CC\": \"Cocos (Keeling) Islands\",\r\n        \"CD\": \"DR Congo\",\r\n        \"CF\": \"Central African Republic\",\r\n        \"CG\": \"Republic of the Congo\",\r\n        \"CH\": \"Switzerland\",\r\n        \"CI\": \"Côte d'Ivoire (Ivory Coast)\",\r\n        \"CK\": \"Cook Islands\",\r\n        \"CL\": \"Chile\",\r\n        \"CM\": \"Cameroon\",\r\n        \"CN\": \"China\",\r\n        \"CO\": \"Colombia\",\r\n        \"CR\": \"Costa Rica\",\r\n        \"CU\": \"Cuba\",\r\n        \"CV\": \"Cape Verde\",\r\n        \"CW\": \"Curaçao\",\r\n        \"CX\": \"Christmas Island\",\r\n        \"CY\": \"Cyprus\",\r\n        \"CZ\": \"Czechia\",\r\n        \"DE\": \"Germany\",\r\n        \"DJ\": \"Djibouti\",\r\n        \"DK\": \"Denmark\",\r\n        \"DM\": \"Dominica\",\r\n        \"DO\": \"Dominican Republic\",\r\n        \"DZ\": \"Algeria\",\r\n        \"EC\": \"Ecuador\",\r\n        \"EE\": \"Estonia\",\r\n        \"EG\": \"Egypt\",\r\n        \"EH\": \"Western Sahara\",\r\n        \"ER\": \"Eritrea\",\r\n        \"ES\": \"Spain\",\r\n        \"ET\": \"Ethiopia\",\r\n        \"FI\": \"Finland\",\r\n        \"FJ\": \"Fiji\",\r\n        \"FK\": \"Falkland Islands\",\r\n        \"FM\": \"Micronesia\",\r\n        \"FO\": \"Faroe Islands\",\r\n        \"FR\": \"France\",\r\n        \"GA\": \"Gabon\",\r\n        \"GB\": \"United Kingdom\",\r\n        \"GB-ENG\": \"England\",\r\n        \"GB-NIR\": \"Northern Ireland\",\r\n        \"GB-SCT\": \"Scotland\",\r\n        \"GB-WLS\": \"Wales\",\r\n        \"GD\": \"Grenada\",\r\n        \"GE\": \"Georgia\",\r\n        \"GF\": \"French Guiana\",\r\n        \"GG\": \"Guernsey\",\r\n        \"GH\": \"Ghana\",\r\n        \"GI\": \"Gibraltar\",\r\n        \"GL\": \"Greenland\",\r\n        \"GM\": \"Gambia\",\r\n        \"GN\": \"Guinea\",\r\n        \"GP\": \"Guadeloupe\",\r\n        \"GQ\": \"Equatorial Guinea\",\r\n        \"GR\": \"Greece\",\r\n        \"GS\": \"South Georgia\",\r\n        \"GT\": \"Guatemala\",\r\n        \"GU\": \"Guam\",\r\n        \"GW\": \"Guinea-Bissau\",\r\n        \"GY\": \"Guyana\",\r\n        \"HK\": \"Hong Kong\",\r\n        \"HM\": \"Heard Island and McDonald Islands\",\r\n        \"HN\": \"Honduras\",\r\n        \"HR\": \"Croatia\",\r\n        \"HT\": \"Haiti\",\r\n        \"HU\": \"Hungary\",\r\n        \"ID\": \"Indonesia\",\r\n        \"IE\": \"Ireland\",\r\n        \"IL\": \"Israel\",\r\n        \"IM\": \"Isle of Man\",\r\n        \"IN\": \"India\",\r\n        \"IO\": \"British Indian Ocean Territory\",\r\n        \"IQ\": \"Iraq\",\r\n        \"IR\": \"Iran\",\r\n        \"IS\": \"Iceland\",\r\n        \"IT\": \"Italy\",\r\n        \"JE\": \"Jersey\",\r\n        \"JM\": \"Jamaica\",\r\n        \"JO\": \"Jordan\",\r\n        \"JP\": \"Japan\",\r\n        \"KE\": \"Kenya\",\r\n        \"KG\": \"Kyrgyzstan\",\r\n        \"KH\": \"Cambodia\",\r\n        \"KI\": \"Kiribati\",\r\n        \"KM\": \"Comoros\",\r\n        \"KN\": \"Saint Kitts and Nevis\",\r\n        \"KP\": \"North Korea\",\r\n        \"KR\": \"South Korea\",\r\n        \"KW\": \"Kuwait\",\r\n        \"KY\": \"Cayman Islands\",\r\n        \"KZ\": \"Kazakhstan\",\r\n        \"LA\": \"Laos\",\r\n        \"LB\": \"Lebanon\",\r\n        \"LC\": \"Saint Lucia\",\r\n        \"LI\": \"Liechtenstein\",\r\n        \"LK\": \"Sri Lanka\",\r\n        \"LR\": \"Liberia\",\r\n        \"LS\": \"Lesotho\",\r\n        \"LT\": \"Lithuania\",\r\n        \"LU\": \"Luxembourg\",\r\n        \"LV\": \"Latvia\",\r\n        \"LY\": \"Libya\",\r\n        \"MA\": \"Morocco\",\r\n        \"MC\": \"Monaco\",\r\n        \"MD\": \"Moldova\",\r\n        \"ME\": \"Montenegro\",\r\n        \"MF\": \"Saint Martin\",\r\n        \"MG\": \"Madagascar\",\r\n        \"MH\": \"Marshall Islands\",\r\n        \"MK\": \"North Macedonia\",\r\n        \"ML\": \"Mali\",\r\n        \"MM\": \"Myanmar\",\r\n        \"MN\": \"Mongolia\",\r\n        \"MO\": \"Macau\",\r\n        \"MP\": \"Northern Mariana Islands\",\r\n        \"MQ\": \"Martinique\",\r\n        \"MR\": \"Mauritania\",\r\n        \"MS\": \"Montserrat\",\r\n        \"MT\": \"Malta\",\r\n        \"MU\": \"Mauritius\",\r\n        \"MV\": \"Maldives\",\r\n        \"MW\": \"Malawi\",\r\n        \"MX\": \"Mexico\",\r\n        \"MY\": \"Malaysia\",\r\n        \"MZ\": \"Mozambique\",\r\n        \"NA\": \"Namibia\",\r\n        \"NC\": \"New Caledonia\",\r\n        \"NE\": \"Niger\",\r\n        \"NF\": \"Norfolk Island\",\r\n        \"NG\": \"Nigeria\",\r\n        \"NI\": \"Nicaragua\",\r\n        \"NL\": \"Netherlands\",\r\n        \"NO\": \"Norway\",\r\n        \"NP\": \"Nepal\",\r\n        \"NR\": \"Nauru\",\r\n        \"NU\": \"Niue\",\r\n        \"NZ\": \"New Zealand\",\r\n        \"OM\": \"Oman\",\r\n        \"PA\": \"Panama\",\r\n        \"PE\": \"Peru\",\r\n        \"PF\": \"French Polynesia\",\r\n        \"PG\": \"Papua New Guinea\",\r\n        \"PH\": \"Philippines\",\r\n        \"PK\": \"Pakistan\",\r\n        \"PL\": \"Poland\",\r\n        \"PM\": \"Saint Pierre and Miquelon\",\r\n        \"PN\": \"Pitcairn Islands\",\r\n        \"PR\": \"Puerto Rico\",\r\n        \"PS\": \"Palestine\",\r\n        \"PT\": \"Portugal\",\r\n        \"PW\": \"Palau\",\r\n        \"PY\": \"Paraguay\",\r\n        \"QA\": \"Qatar\",\r\n        \"RE\": \"Réunion\",\r\n        \"RO\": \"Romania\",\r\n        \"RS\": \"Serbia\",\r\n        \"RU\": \"Russia\",\r\n        \"RW\": \"Rwanda\",\r\n        \"SA\": \"Saudi Arabia\",\r\n        \"SB\": \"Solomon Islands\",\r\n        \"SC\": \"Seychelles\",\r\n        \"SD\": \"Sudan\",\r\n        \"SE\": \"Sweden\",\r\n        \"SG\": \"Singapore\",\r\n        \"SH\": \"Saint Helena, Ascension and Tristan da Cunha\",\r\n        \"SI\": \"Slovenia\",\r\n        \"SJ\": \"Svalbard and Jan Mayen\",\r\n        \"SK\": \"Slovakia\",\r\n        \"SL\": \"Sierra Leone\",\r\n        \"SM\": \"San Marino\",\r\n        \"SN\": \"Senegal\",\r\n        \"SO\": \"Somalia\",\r\n        \"SR\": \"Suriname\",\r\n        \"SS\": \"South Sudan\",\r\n        \"ST\": \"São Tomé and Príncipe\",\r\n        \"SV\": \"El Salvador\",\r\n        \"SX\": \"Sint Maarten\",\r\n        \"SY\": \"Syria\",\r\n        \"SZ\": \"Eswatini (Swaziland)\",\r\n        \"TC\": \"Turks and Caicos Islands\",\r\n        \"TD\": \"Chad\",\r\n        \"TF\": \"French Southern and Antarctic Lands\",\r\n        \"TG\": \"Togo\",\r\n        \"TH\": \"Thailand\",\r\n        \"TJ\": \"Tajikistan\",\r\n        \"TK\": \"Tokelau\",\r\n        \"TL\": \"Timor-Leste\",\r\n        \"TM\": \"Turkmenistan\",\r\n        \"TN\": \"Tunisia\",\r\n        \"TO\": \"Tonga\",\r\n        \"TR\": \"Turkey\",\r\n        \"TT\": \"Trinidad and Tobago\",\r\n        \"TV\": \"Tuvalu\",\r\n        \"TW\": \"Taiwan\",\r\n        \"TZ\": \"Tanzania\",\r\n        \"UA\": \"Ukraine\",\r\n        \"UG\": \"Uganda\",\r\n        \"UM\": \"United States Minor Outlying Islands\",\r\n        \"US\": \"United States\",\r\n        \"UY\": \"Uruguay\",\r\n        \"UZ\": \"Uzbekistan\",\r\n        \"VA\": \"Vatican City (Holy See)\",\r\n        \"VC\": \"Saint Vincent and the Grenadines\",\r\n        \"VE\": \"Venezuela\",\r\n        \"VG\": \"British Virgin Islands\",\r\n        \"VI\": \"United States Virgin Islands\",\r\n        \"VN\": \"Vietnam\",\r\n        \"VU\": \"Vanuatu\",\r\n        \"WF\": \"Wallis and Futuna\",\r\n        \"WS\": \"Samoa\",\r\n        \"XK\": \"Kosovo\",\r\n        \"YE\": \"Yemen\",\r\n        \"YT\": \"Mayotte\",\r\n        \"ZA\": \"South Africa\",\r\n        \"ZM\": \"Zambia\",\r\n        \"ZW\": \"Zimbabwe\"\r\n        };\r\n\r\n    function getCountyCode(value){\r\n        let retkey=\"NA\";\r\n        for(let key in countries){\r\n            if(value == countries[key]){\r\n                retkey=key;\r\n            }\r\n        }\r\n        return \"https://flagpedia.net/data/flags/normal/\"+retkey.toLowerCase()+\".png\";\r\n    }\r\n    let months={\r\n        '1':\"January\",\r\n        '2':\"February\",\r\n        '3':\"March\",\r\n        '4':\"April\",\r\n        '5':\"May\",\r\n        '6':\"June\",\r\n        '7':\"July\",\r\n        '8':\"August\",\r\n        '9':\"September\",\r\n        '10':\"October\",\r\n        '11':\"November\",\r\n        '12':\"December\"}\r\n    function formatData(date){\r\n        let ar = date.split('-');\r\n        return ar[2]+\" \"+months[ar[1]]+\", \"+ar[0];\r\n    }\r\n    return(\r\n        <div className=\"card-container\">\r\n          \r\n            <img class=\"imageClass\" src={getCountyCode(props.country.country)}/>\r\n            <h2>{props.country.country}</h2>\r\n            <p>Last Reported Date: {formatData(props.country.lastReported.date)}</p>\r\n            <p>Confirmed: {props.country.lastReported.confirmed}</p>\r\n            <p>Deceased: {props.country.lastReported.deaths}</p>\r\n            <p>Recovered: {props.country.lastReported.recovered}</p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Country} from '../country/country.component';\r\nimport './country-list.css';\r\n\r\nexport const CountryList=(props) =>{\r\n    return(        \r\n        <div className=\"card-list\">\r\n        {\r\n          props.countries.map(country=>{\r\n              return <Country key={country.country} country={country}></Country>\r\n           })\r\n        }\r\n      </div>        \r\n    )\r\n}","import React from 'react';\r\nimport './search.css';\r\n\r\nexport const Search= ({placeholder,handleChange})=>{\r\n    return (\r\n        <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange}/>\r\n    )\r\n}","import './App.css';\nimport React, {Component} from 'react';\nimport {CountryList} from './countryList/country-list.component';\nimport {Search} from './search/search.component';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      countries:[],\n      searchText:''\n    }\n  }\n  componentDidMount(){\n    fetch('https://pomber.github.io/covid19/timeseries.json').\n    then(resp=>resp.json()).\n    then(data=>this.setState({countries:this.formatData(data)}));\n  }\n  formatData(data){\n    let returnData =[];\n    for(let key in data){\n      let newObj = {country:key,value:data[key],lastReported:this.getMaxCount(data[key])};\n      returnData.push(newObj);\n    }\n    return returnData;\n  }\n  getMaxCount(data){\n    let val = 0;\n    val = data[data.length-1];\n    return val;\n  }\n  handleChange=(e)=>{\n    this.setState({searchText:e.target.value});\n  }\n  render(){\n    const {countries, searchText} = this.state;\n    let filterList=countries.filter(c=>{\n      return c.country.toLowerCase().includes(searchText.toLowerCase())\n    })\n    return (\n      <div className=\"App\">\n        <h1><img class=\"logo\" src=\"./assets/images/icon.png\"/>Covid-19 Tracker</h1>\n        <Search placeholder=\"Search Country\" handleChange={this.handleChange}\n       ></Search>       \n        <CountryList countries={filterList}></CountryList>\n      </div>\n    )\n  }\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}